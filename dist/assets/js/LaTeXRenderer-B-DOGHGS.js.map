{"version":3,"file":"LaTeXRenderer-B-DOGHGS.js","sources":["../../../components/LaTeXRenderer.tsx"],"sourcesContent":["interface LaTeXRendererProps {\n  content: string\n  displayMode?: boolean\n  className?: string\n}\n\n// Simple LaTeX-like formatter without external dependencies\nfunction formatMath(content: string): string {\n  return (\n    content\n      // Greek letters\n      .replace(/\\\\\\\\alpha/g, 'α')\n      .replace(/\\\\\\\\beta/g, 'β')\n      .replace(/\\\\\\\\gamma/g, 'γ')\n      .replace(/\\\\\\\\delta/g, 'δ')\n      .replace(/\\\\\\\\epsilon/g, 'ε')\n      .replace(/\\\\\\\\zeta/g, 'ζ')\n      .replace(/\\\\\\\\eta/g, 'η')\n      .replace(/\\\\\\\\theta/g, 'θ')\n      .replace(/\\\\\\\\iota/g, 'ι')\n      .replace(/\\\\\\\\kappa/g, 'κ')\n      .replace(/\\\\\\\\lambda/g, 'λ')\n      .replace(/\\\\\\\\mu/g, 'μ')\n      .replace(/\\\\\\\\nu/g, 'ν')\n      .replace(/\\\\\\\\xi/g, 'ξ')\n      .replace(/\\\\\\\\pi/g, 'π')\n      .replace(/\\\\\\\\rho/g, 'ρ')\n      .replace(/\\\\\\\\sigma/g, 'σ')\n      .replace(/\\\\\\\\tau/g, 'τ')\n      .replace(/\\\\\\\\phi/g, 'φ')\n      .replace(/\\\\\\\\chi/g, 'χ')\n      .replace(/\\\\\\\\psi/g, 'ψ')\n      .replace(/\\\\\\\\omega/g, 'ω')\n      // Capital Greek letters\n      .replace(/\\\\\\\\Gamma/g, 'Γ')\n      .replace(/\\\\\\\\Delta/g, 'Δ')\n      .replace(/\\\\\\\\Theta/g, 'Θ')\n      .replace(/\\\\\\\\Lambda/g, 'Λ')\n      .replace(/\\\\\\\\Xi/g, 'Ξ')\n      .replace(/\\\\\\\\Pi/g, 'Π')\n      .replace(/\\\\\\\\Sigma/g, 'Σ')\n      .replace(/\\\\\\\\Phi/g, 'Φ')\n      .replace(/\\\\\\\\Psi/g, 'Ψ')\n      .replace(/\\\\\\\\Omega/g, 'Ω')\n      // Math operators\n      .replace(/\\\\\\\\sum/g, '∑')\n      .replace(/\\\\\\\\prod/g, '∏')\n      .replace(/\\\\\\\\int/g, '∫')\n      .replace(/\\\\\\\\partial/g, '∂')\n      .replace(/\\\\\\\\nabla/g, '∇')\n      .replace(/\\\\\\\\infty/g, '∞')\n      .replace(/\\\\\\\\leq/g, '≤')\n      .replace(/\\\\\\\\geq/g, '≥')\n      .replace(/\\\\\\\\neq/g, '≠')\n      .replace(/\\\\\\\\approx/g, '≈')\n      .replace(/\\\\\\\\equiv/g, '≡')\n      .replace(/\\\\\\\\propto/g, '∝')\n      .replace(/\\\\\\\\in/g, '∈')\n      .replace(/\\\\\\\\subset/g, '⊂')\n      .replace(/\\\\\\\\subseteq/g, '⊆')\n      .replace(/\\\\\\\\cup/g, '∪')\n      .replace(/\\\\\\\\cap/g, '∩')\n      .replace(/\\\\\\\\emptyset/g, '∅')\n      .replace(/\\\\\\\\forall/g, '∀')\n      .replace(/\\\\\\\\exists/g, '∃')\n      .replace(/\\\\\\\\neg/g, '¬')\n      .replace(/\\\\\\\\land/g, '∧')\n      .replace(/\\\\\\\\lor/g, '∨')\n      .replace(/\\\\\\\\to/g, '→')\n      .replace(/\\\\\\\\Rightarrow/g, '⇒')\n      .replace(/\\\\\\\\Leftarrow/g, '⇐')\n      .replace(/\\\\\\\\Leftrightarrow/g, '⇔')\n      // Math functions with operatorname\n      .replace(/\\\\\\\\operatorname\\{([^}]+)\\}/g, '$1')\n      .replace(/\\\\\\\\max/g, 'max')\n      .replace(/\\\\\\\\min/g, 'min')\n      .replace(/\\\\\\\\arg/g, 'arg')\n      .replace(/\\\\\\\\sup/g, 'sup')\n      .replace(/\\\\\\\\inf/g, 'inf')\n      .replace(/\\\\\\\\lim/g, 'lim')\n      .replace(/\\\\\\\\sin/g, 'sin')\n      .replace(/\\\\\\\\cos/g, 'cos')\n      .replace(/\\\\\\\\tan/g, 'tan')\n      .replace(/\\\\\\\\exp/g, 'exp')\n      .replace(/\\\\\\\\log/g, 'log')\n      .replace(/\\\\\\\\ln/g, 'ln')\n      // Expected value and other common operators\n      .replace(/E_t/g, 'E₍ₜ₎')\n      .replace(/E_0/g, 'E₍₀₎')\n      // Dots\n      .replace(/\\\\\\\\ldots/g, '...')\n      .replace(/\\\\\\\\cdots/g, '⋯')\n      .replace(/\\\\\\\\ddots/g, '⋱')\n      .replace(/\\\\\\\\vdots/g, '⋮')\n      // Fractions - simple replacement\n      .replace(/\\\\\\\\frac\\{([^}]+)\\}\\{([^}]+)\\}/g, '($1)/($2)')\n      // Matrices and arrays - simplified\n      .replace(/\\\\\\\\begin\\{[^}]*\\}/g, '[')\n      .replace(/\\\\\\\\end\\{[^}]*\\}/g, ']')\n      .replace(/\\\\\\\\\\\\\\\\/g, '; ') // Line breaks in matrices\n      .replace(/&/g, ', ') // Column separators\n      // Superscripts and subscripts - handle both braced and single character\n      .replace(/\\\\\\\\_\\{([^}]+)\\}/g, '₍$1₎')\n      .replace(/\\\\\\\\\\^\\{([^}]+)\\}/g, '⁽$1⁾')\n      .replace(/\\\\\\\\_([a-zA-Z0-9])/g, '₍$1₎')\n      .replace(/\\\\\\\\\\^([a-zA-Z0-9])/g, '⁽$1⁾')\n      // Clean up remaining backslashes and braces\n      .replace(/\\\\\\\\([a-zA-Z]+)/g, '$1')\n      .replace(/\\\\\\\\/g, '')\n      .replace(/[{}]/g, '')\n  )\n}\n\nexport function LaTeXRenderer({\n  content,\n  displayMode = false,\n  className = '',\n}: LaTeXRendererProps) {\n  const formattedContent = formatMath(content)\n\n  return (\n    <span\n      className={`${className} ${displayMode ? 'block text-center my-4 text-lg' : 'inline'}`}\n      style={{\n        fontFamily: displayMode ? 'serif' : 'inherit',\n        fontStyle: 'italic',\n        fontSize: displayMode ? '1.1em' : 'inherit',\n      }}\n    >\n      {formattedContent}\n    </span>\n  )\n}\n\n// Helper component for inline math\nexport function InlineMath({\n  children,\n  className = '',\n}: {\n  children: string\n  className?: string\n}) {\n  return (\n    <LaTeXRenderer\n      content={children}\n      displayMode={false}\n      className={`inline ${className}`}\n    />\n  )\n}\n\n// Helper component for display math\nexport function DisplayMath({\n  children,\n  className = '',\n}: {\n  children: string\n  className?: string\n}) {\n  return (\n    <LaTeXRenderer\n      content={children}\n      displayMode={true}\n      className={`block my-4 text-center ${className}`}\n    />\n  )\n}\n\n// Helper function to process inline markdown formatting\nfunction processInlineMarkdown(text: string): JSX.Element[] {\n  const parts = text.split(\n    /(\\*\\*.*?\\*\\*|\\*[^*]*?\\*|`[^`]*?`|\\[[^\\]]*?\\]\\([^)]*?\\))/g\n  )\n\n  return parts\n    .map((part, idx) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        return <strong key={idx}>{part.slice(2, -2)}</strong>\n      } else if (\n        part.startsWith('*') &&\n        part.endsWith('*') &&\n        !part.startsWith('**')\n      ) {\n        return <em key={idx}>{part.slice(1, -1)}</em>\n      } else if (part.startsWith('`') && part.endsWith('`')) {\n        return (\n          <code\n            key={idx}\n            className='bg-gray-100 px-1 rounded text-sm font-mono'\n          >\n            {part.slice(1, -1)}\n          </code>\n        )\n      } else if (part.match(/\\[.*?\\]\\(.*?\\)/)) {\n        const match = part.match(/\\[(.*?)\\]\\((.*?)\\)/)\n        if (match) {\n          return (\n            <a\n              key={idx}\n              href={match[2]}\n              className='text-[#6A5ACD] hover:underline'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              {match[1]}\n            </a>\n          )\n        }\n      }\n\n      // Split by newlines for line breaks\n      return part.split('\\n').map((line, lineIndex, array) => (\n        <span key={`${idx}-${lineIndex}`}>\n          {line}\n          {lineIndex < array.length - 1 && <br />}\n        </span>\n      ))\n    })\n    .flat()\n}\n\n// Component to process text with LaTeX expressions\nexport function ProcessedText({\n  children,\n  className = '',\n}: {\n  children: string\n  className?: string\n}) {\n  const parts = children.split(\n    /(\\$\\$[\\s\\S]*?\\$\\$|\\$[^$\\n][^$]*?[^$\\n]\\$|\\$[^$\\n]\\$)/\n  )\n\n  return (\n    <span className={className}>\n      {parts.map((part, index) => {\n        if (part.startsWith('$') && part.endsWith('$')) {\n          // Display math\n          const mathContent = part.slice(2, -2)\n          return <DisplayMath key={index}>{mathContent}</DisplayMath>\n        } else if (part.startsWith(') && part.endsWith(') && part.length > 2) {\n          // Inline math\n          const mathContent = part.slice(1, -1)\n          return <InlineMath key={index}>{mathContent}</InlineMath>\n        } else {\n          // Regular text - process markdown formatting\n          return <span key={index}>{processInlineMarkdown(part)}</span>\n        }\n      })}\n    </span>\n  )\n}\n"],"names":["formatMath","content","LaTeXRenderer","displayMode","className","formattedContent","jsx","InlineMath","children","DisplayMath","processInlineMarkdown","text","part","idx","match","line","lineIndex","array","jsxs","ProcessedText","parts","index","mathContent"],"mappings":"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"}