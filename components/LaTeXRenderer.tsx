interface LaTeXRendererProps {
  content: string
  displayMode?: boolean
  className?: string
}

// Enhanced LaTeX-like formatter for mathematical expressions
function formatMath(content: string): string {
  return (
    content
      // Handle line breaks in equations
      .replace(/\\\\/g, '\n')
      // Handle alignment characters (just remove them for now)
      .replace(/&/g, ' ')
      // Greek letters (single backslash)
      .replace(/\\alpha\b/g, 'Œ±')
      .replace(/\\beta\b/g, 'Œ≤')
      .replace(/\\gamma\b/g, 'Œ≥')
      .replace(/\\delta\b/g, 'Œ¥')
      .replace(/\\epsilon\b/g, 'Œµ')
      .replace(/\\varepsilon\b/g, 'Œµ')
      .replace(/\\zeta\b/g, 'Œ∂')
      .replace(/\\eta\b/g, 'Œ∑')
      .replace(/\\theta\b/g, 'Œ∏')
      .replace(/\\vartheta\b/g, 'œë')
      .replace(/\\iota\b/g, 'Œπ')
      .replace(/\\kappa\b/g, 'Œ∫')
      .replace(/\\lambda\b/g, 'Œª')
      .replace(/\\mu\b/g, 'Œº')
      .replace(/\\nu\b/g, 'ŒΩ')
      .replace(/\\xi\b/g, 'Œæ')
      .replace(/\\pi\b/g, 'œÄ')
      .replace(/\\varpi\b/g, 'œñ')
      .replace(/\\rho\b/g, 'œÅ')
      .replace(/\\varrho\b/g, 'œ±')
      .replace(/\\sigma\b/g, 'œÉ')
      .replace(/\\varsigma\b/g, 'œÇ')
      .replace(/\\tau\b/g, 'œÑ')
      .replace(/\\upsilon\b/g, 'œÖ')
      .replace(/\\phi\b/g, 'œÜ')
      .replace(/\\varphi\b/g, 'œï')
      .replace(/\\chi\b/g, 'œá')
      .replace(/\\psi\b/g, 'œà')
      .replace(/\\omega\b/g, 'œâ')
      
      // Capital Greek letters
      .replace(/\\Gamma\b/g, 'Œì')
      .replace(/\\Delta\b/g, 'Œî')
      .replace(/\\Theta\b/g, 'Œò')
      .replace(/\\Lambda\b/g, 'Œõ')
      .replace(/\\Xi\b/g, 'Œû')
      .replace(/\\Pi\b/g, 'Œ†')
      .replace(/\\Sigma\b/g, 'Œ£')
      .replace(/\\Upsilon\b/g, 'Œ•')
      .replace(/\\Phi\b/g, 'Œ¶')
      .replace(/\\Chi\b/g, 'Œß')
      .replace(/\\Psi\b/g, 'Œ®')
      .replace(/\\Omega\b/g, 'Œ©')
      
      // Math operators and symbols
      .replace(/\\sum\b/g, '‚àë')
      .replace(/\\prod\b/g, '‚àè')
      .replace(/\\int\b/g, '‚à´')
      .replace(/\\oint\b/g, '‚àÆ')
      .replace(/\\partial\b/g, '‚àÇ')
      .replace(/\\nabla\b/g, '‚àá')
      .replace(/\\infty\b/g, '‚àû')
      .replace(/\\leq\b/g, '‚â§')
      .replace(/\\geq\b/g, '‚â•')
      .replace(/\\neq\b/g, '‚â†')
      .replace(/\\approx\b/g, '‚âà')
      .replace(/\\equiv\b/g, '‚â°')
      .replace(/\\propto\b/g, '‚àù')
      .replace(/\\in\b/g, '‚àà')
      .replace(/\\notin\b/g, '‚àâ')
      .replace(/\\subset\b/g, '‚äÇ')
      .replace(/\\subseteq\b/g, '‚äÜ')
      .replace(/\\supset\b/g, '‚äÉ')
      .replace(/\\supseteq\b/g, '‚äá')
      .replace(/\\cup\b/g, '‚à™')
      .replace(/\\cap\b/g, '‚à©')
      .replace(/\\emptyset\b/g, '‚àÖ')
      .replace(/\\forall\b/g, '‚àÄ')
      .replace(/\\exists\b/g, '‚àÉ')
      .replace(/\\neg\b/g, '¬¨')
      .replace(/\\land\b/g, '‚àß')
      .replace(/\\lor\b/g, '‚à®')
      .replace(/\\to\b/g, '‚Üí')
      .replace(/\\rightarrow\b/g, '‚Üí')
      .replace(/\\leftarrow\b/g, '‚Üê')
      .replace(/\\leftrightarrow\b/g, '‚Üî')
      .replace(/\\Rightarrow\b/g, '‚áí')
      .replace(/\\Leftarrow\b/g, '‚áê')
      .replace(/\\Leftrightarrow\b/g, '‚áî')
      .replace(/\\implies\b/g, '‚áí')
      .replace(/\\iff\b/g, '‚áî')
      
      // Additional math symbols
      .replace(/\\pm\b/g, '¬±')
      .replace(/\\mp\b/g, '‚àì')
      .replace(/\\times\b/g, '√ó')
      .replace(/\\div\b/g, '√∑')
      .replace(/\\cdot\b/g, '‚ãÖ')
      .replace(/\\bullet\b/g, '‚Ä¢')
      .replace(/\\circ\b/g, '‚àò')
      .replace(/\\oplus\b/g, '‚äï')
      .replace(/\\ominus\b/g, '‚äñ')
      .replace(/\\otimes\b/g, '‚äó')
      .replace(/\\oslash\b/g, '‚äò')
      
      // Dots
      .replace(/\\ldots\b/g, '‚Ä¶')
      .replace(/\\cdots\b/g, '‚ãØ')
      .replace(/\\ddots\b/g, '‚ã±')
      .replace(/\\vdots\b/g, '‚ãÆ')
      
      // Math functions
      .replace(/\\operatorname\{([^}]+)\}/g, '$1')
      .replace(/\\max\b/g, 'max')
      .replace(/\\min\b/g, 'min')
      .replace(/\\arg\b/g, 'arg')
      .replace(/\\sup\b/g, 'sup')
      .replace(/\\inf\b/g, 'inf')
      .replace(/\\lim\b/g, 'lim')
      .replace(/\\sin\b/g, 'sin')
      .replace(/\\cos\b/g, 'cos')
      .replace(/\\tan\b/g, 'tan')
      .replace(/\\sec\b/g, 'sec')
      .replace(/\\csc\b/g, 'csc')
      .replace(/\\cot\b/g, 'cot')
      .replace(/\\exp\b/g, 'exp')
      .replace(/\\log\b/g, 'log')
      .replace(/\\ln\b/g, 'ln')
      .replace(/\\det\b/g, 'det')
      .replace(/\\dim\b/g, 'dim')
      .replace(/\\ker\b/g, 'ker')
      .replace(/\\gcd\b/g, 'gcd')
      
      // Expected value and probability
      .replace(/\\mathbb\{E\}/g, 'ùîº')
      .replace(/\\mathbb\{P\}/g, '‚Ñô')
      .replace(/\\mathbb\{R\}/g, '‚Ñù')
      .replace(/\\mathbb\{N\}/g, '‚Ñï')
      .replace(/\\mathbb\{Z\}/g, '‚Ñ§')
      .replace(/\\mathbb\{Q\}/g, '‚Ñö')
      .replace(/\\mathbb\{C\}/g, '‚ÑÇ')
      
      // Fractions - enhanced handling
      .replace(/\\frac\{([^{}]*(?:\{[^{}]*\}[^{}]*)*)\}\{([^{}]*(?:\{[^{}]*\}[^{}]*)*)\}/g, '($1)/($2)')
      
      // Superscripts and subscripts with better handling
      .replace(/_\{([^{}]*(?:\{[^{}]*\}[^{}]*)*)\}/g, (_, content) => {
        return '‚Çç' + convertToSubscript(content) + '‚Çé'
      })
      .replace(/\^\{([^{}]*(?:\{[^{}]*\}[^{}]*)*)\}/g, (_, content) => {
        return '‚ÅΩ' + convertToSuperscript(content) + '‚Åæ'
      })
      .replace(/_([a-zA-Z0-9])/g, '‚Çç$1‚Çé')
      .replace(/\^([a-zA-Z0-9])/g, '‚ÅΩ$1‚Åæ')
      
      // Square roots
      .replace(/\\sqrt\{([^}]+)\}/g, '‚àö($1)')
      
      // Matrices and arrays - better handling
      .replace(/\\begin\{pmatrix\}([\s\S]*?)\\end\{pmatrix\}/g, (_, content) => {
        return '(' + content.replace(/\\\\/g, '; ').replace(/&/g, ', ') + ')'
      })
      .replace(/\\begin\{bmatrix\}([\s\S]*?)\\end\{bmatrix\}/g, (_, content) => {
        return '[' + content.replace(/\\\\/g, '; ').replace(/&/g, ', ') + ']'
      })
      .replace(/\\begin\{matrix\}([\s\S]*?)\\end\{matrix\}/g, (_, content) => {
        return content.replace(/\\\\/g, '; ').replace(/&/g, ', ')
      })
      
      // Clean up spacing and remaining LaTeX commands
      .replace(/\\quad/g, '  ')
      .replace(/\\qquad/g, '    ')
      .replace(/\\,/g, ' ')
      .replace(/\\;/g, ' ')
      .replace(/\\!/g, '')
      .replace(/\\:/g, ' ')
      .replace(/\\ /g, ' ')
      
      // Remove remaining backslashes and clean up
      .replace(/\\([a-zA-Z]+)/g, '$1')
      .replace(/\\\\/g, '')
      .replace(/\{([^{}]*)\}/g, '$1')
  )
}

// Helper functions for subscript/superscript conversion
function convertToSubscript(text: string): string {
  return text
    .replace(/0/g, '‚ÇÄ').replace(/1/g, '‚ÇÅ').replace(/2/g, '‚ÇÇ')
    .replace(/3/g, '‚ÇÉ').replace(/4/g, '‚ÇÑ').replace(/5/g, '‚ÇÖ')
    .replace(/6/g, '‚ÇÜ').replace(/7/g, '‚Çá').replace(/8/g, '‚Çà')
    .replace(/9/g, '‚Çâ').replace(/\+/g, '‚Çä').replace(/-/g, '‚Çã')
    .replace(/=/g, '‚Çå').replace(/\(/g, '‚Çç').replace(/\)/g, '‚Çé')
}

function convertToSuperscript(text: string): string {
  return text
    .replace(/0/g, '‚Å∞').replace(/1/g, '¬π').replace(/2/g, '¬≤')
    .replace(/3/g, '¬≥').replace(/4/g, '‚Å¥').replace(/5/g, '‚Åµ')
    .replace(/6/g, '‚Å∂').replace(/7/g, '‚Å∑').replace(/8/g, '‚Å∏')
    .replace(/9/g, '‚Åπ').replace(/\+/g, '‚Å∫').replace(/-/g, '‚Åª')
    .replace(/=/g, '‚Åº').replace(/\(/g, '‚ÅΩ').replace(/\)/g, '‚Åæ')
}

export function LaTeXRenderer({
  content,
  displayMode = false,
  className = '',
}: LaTeXRendererProps) {
  const formattedContent = formatMath(content)

  return (
    <span
      className={`${className} ${displayMode ? 'block my-6 text-lg font-serif' : 'inline font-serif'}`}
      style={{
        fontStyle: 'italic',
        fontSize: displayMode ? '1.1em' : 'inherit',
        lineHeight: displayMode ? '1.6' : 'inherit',
      }}
    >
      <div className={displayMode ? 'bg-gray-50 p-4 rounded-lg border-l-4 border-blue-200' : 'inline'}>
        {displayMode ? (
          formattedContent.split('\n').map((line, index) => (
            <div key={index} className="mb-2">
              {line}
            </div>
          ))
        ) : (
          formattedContent
        )}
      </div>
    </span>
  )
}

// Helper component for inline math
export function InlineMath({
  children,
  className = '',
}: {
  children: string
  className?: string
}) {
  return (
    <LaTeXRenderer
      content={children}
      displayMode={false}
      className={`inline ${className}`}
    />
  )
}

// Helper component for display math
export function DisplayMath({
  children,
  className = '',
}: {
  children: string
  className?: string
}) {
  return (
    <LaTeXRenderer
      content={children}
      displayMode={true}
      className={`block my-4 text-center ${className}`}
    />
  )
}

// Helper function to process inline markdown formatting
function processInlineMarkdown(text: string): JSX.Element[] {
  const parts = text.split(
    /(\*\*.*?\*\*|\*[^*]*?\*|`[^`]*?`|\[[^\]]*?\]\([^)]*?\))/g
  )

  return parts
    .map((part, idx) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return <strong key={idx}>{part.slice(2, -2)}</strong>
      } else if (
        part.startsWith('*') &&
        part.endsWith('*') &&
        !part.startsWith('**')
      ) {
        return <em key={idx}>{part.slice(1, -1)}</em>
      } else if (part.startsWith('`') && part.endsWith('`')) {
        return (
          <code
            key={idx}
            className='bg-gray-100 px-1 rounded text-sm font-mono'
          >
            {part.slice(1, -1)}
          </code>
        )
      } else if (part.match(/\[.*?\]\(.*?\)/)) {
        const match = part.match(/\[(.*?)\]\((.*?)\)/)
        if (match) {
          return (
            <a
              key={idx}
              href={match[2]}
              className='text-[#6A5ACD] hover:underline'
              target='_blank'
              rel='noopener noreferrer'
            >
              {match[1]}
            </a>
          )
        }
      }

      // Split by newlines for line breaks
      return part.split('\n').map((line, lineIndex, array) => (
        <span key={`${idx}-${lineIndex}`}>
          {line}
          {lineIndex < array.length - 1 && <br />}
        </span>
      ))
    })
    .flat()
}

// Component to process text with LaTeX expressions
export function ProcessedText({
  children,
  className = '',
}: {
  children: string
  className?: string
}) {
  // More robust math detection
  let processedContent = children
  const mathParts: { type: 'display' | 'inline', content: string, placeholder: string }[] = []
  
  // First, handle \begin{align} environments
  processedContent = processedContent.replace(/\\begin\{align\}([\s\S]*?)\\end\{align\}/g, (_, content) => {
    const placeholder = `__DISPLAY_MATH_${mathParts.length}__`
    mathParts.push({ type: 'display', content: content.trim(), placeholder })
    return placeholder
  })
  
  // Handle \subsection{} commands
  processedContent = processedContent.replace(/\\subsection\{([^}]+)\}/g, (_, title) => {
    return `\n### ${title}\n`
  })
  
  // Then, extract and replace display math ($$...$$)
  processedContent = processedContent.replace(/\$\$([\s\S]*?)\$\$/g, (_, content) => {
    const placeholder = `__DISPLAY_MATH_${mathParts.length}__`
    mathParts.push({ type: 'display', content: content.trim(), placeholder })
    return placeholder
  })
  
  // Then extract and replace inline math ($...$)
  processedContent = processedContent.replace(/\$([^$\n]+)\$/g, (_, content) => {
    const placeholder = `__INLINE_MATH_${mathParts.length}__`
    mathParts.push({ type: 'inline', content: content.trim(), placeholder })
    return placeholder
  })
  
  // Split by placeholders
  const parts = processedContent.split(/(__(?:DISPLAY|INLINE)_MATH_\d+__)/)

  return (
    <span className={className}>
      {parts.map((part, index) => {
        // Check if this part is a math placeholder
        const mathMatch = part.match(/__(?:DISPLAY|INLINE)_MATH_(\d+)__/)
        if (mathMatch) {
          const mathIndex = parseInt(mathMatch[1])
          const mathPart = mathParts[mathIndex]
          if (mathPart) {
            if (mathPart.type === 'display') {
              return <DisplayMath key={index}>{mathPart.content}</DisplayMath>
            } else {
              return <InlineMath key={index}>{mathPart.content}</InlineMath>
            }
          }
        }
        
        // Regular text - split into lines and process markdown formatting
        const lines = part.split('\n')
        return (
          <div key={index}>
            {lines.map((line, lineIndex) => {
              // Check for headers
              if (line.startsWith('### ')) {
                return (
                  <h3 key={lineIndex} className="text-xl font-medium mt-6 mb-4 text-black">
                    {line.substring(4)}
                  </h3>
                )
              } else if (line.trim() === '') {
                return <br key={lineIndex} />
              } else {
                return <span key={lineIndex}>{processInlineMarkdown(line)}</span>
              }
            })}
          </div>
        )
      })}
    </span>
  )
}